#!/usr/bin/env node
'use strict';

/**
 * grpc-api-packager is a tool for generating language packages for gRPC
 * services.
 *
 * Example usage:
 *
 * Create the pubsub v1 API for all the default languages directly from the
 * googleapis github project.
 *
 * ```sh
 * $ grpc-api-packager --api_name=pubsub/v1
 * ```
 *
 * Create the pubsub v1 API for ruby and python from a local copy of the
 * googleapis github project.
 *
 * ```sh
 * $ # clone the googleapis locally
 * $ pushd ..
 * $ git clone git@github.com:google/googleapis.git
 * $ # do some work in it, e.g, to test a change
 * $ ...
 * $ popd  # back to the original wd
 * $ grpc-api-packager --api_name=pubsub/v1  -r ../googleapis -l python ruby
 * ```
 *
 * Print full usage
 * ```sh
 * $ grpc-api-packager -h
 * ```
 */

var _ = require('lodash');
var path = require('path');
var version = require('../package.json').version;

var ApiRepo = require('../lib/api_repo').ApiRepo;
var ArgumentParser = require('argparse').ArgumentParser;

/**
 * parseArgs parses the command line options/arguments when this file is run as
 * a script.
 */
var parseArgs = function parseArgs() {
  var cli = new ArgumentParser({
    prog: 'grpc-api-packager',
    addHelp: true,
    description: 'Creates packages for gRPC services.',
    version: version
  });
  cli.addArgument(
    [ '-x', '--build_common_protos' ],
    {
      defaultValue: false,
      action: 'storeTrue',
      help: 'When set indicates that package for the common api'
            + ' protos should be built.\n',
      dest: 'buildCommonProtos'
    }
  );
  cli.addArgument(
    [ '-i', '--include_path' ],
    {
      help: 'Include path for additional protos\n' +
        'This is a PATH-like value used to locate shared proto defintions' +
        ' outside of an apis directory, but within services_root or repository',
      dest: 'includePath'
    }
  );
  cli.addArgument(
    [ '-o', '--out_dir' ],
    {
      help: 'The directory in which the generated packages will be saved.',
      dest: 'outDir'
    }
  );
  cli.addArgument(
    [ '-n', '--api_name' ],
    {
      help: 'Name of the api to generate\n' +
        'The name should include the version component; e.g. use "pubsub/v1"' +
        ' to specify the protos in pubsub/v1 sub-directory of the services_root',
      dest: 'apiName'
    }
  );
  cli.addArgument(
    [ '-l', '--languages' ],
    {
      help: 'Specifies the language packages to be generated\n',
      nargs: '*',
      dest: 'languages'
    }
  );
  cli.addArgument(
    [ '-r', '--services_root' ],
    {
      help: 'The directory containing the rpc service proto definitions.'
          + '\nShould not be specified with -r/--protobuf, which clobbers this.',
      dest: 'repoDir'
    }
  );
  cli.addArgument(
    [ '-u', '--zip_url' ],
    {
      help: 'URL of a git repository containing the rpc proto definitions.\n'
          + 'Should not be specified with -r/--protobuf_root, which will be'
          + ' ignored',
      dest: 'zipUrl'
    }
  );
  cli.addArgument(
    [ '--api_defaults_file' ],
    {
      help: 'Specifies an alternate location for the api_defaults config' +
        ' file\n api_defaults configures shared metadata that is may be' +
        ' included in all the package files',
      dest: 'apiDefaultsFile'
    }
  );
  cli.addArgument(
    [ '--dependencies_file' ],
    {
      help: 'Specifies an alternate location for the deps config file\n' +
        'dependencies configures the package dependencies to include in the ' +
        ' generated package file',
      dest: 'dependenciesFile'
    }
  );
  cli.addArgument(
    [ '--package_prefix' ],
    {
      defaultValue: '',
      help: 'Prefix to use when constructing package names\n' +
        'if is_google_api is set, this defaults to "grpc-google-" otherwise ' +
        ' the default is ""',
      dest: 'pkgPrefix'
    }
  );
  cli.addArgument(
    [ '-g', '--is_google_api' ],
    {
      defaultValue: true,
      action: 'storeTrue',
      help: 'When set indicates that the API is an official google API.\n'
            + ' This means that there is a top-level google dir beneath the root',
      dest: 'isGoogleApi'
    }
  );
  cli.addArgument(
    [ '--override_plugins' ],
    {
      action: 'append',
      help: 'Specifies the override protoc plugins to be used\n',
      dest: 'overridePlugins'
    }
  );
  return cli.parseArgs();
}

var parsePlugins = function parsePlugins(pluginSpecs) {
  var parsedSpecs = [];
  _.forEach(pluginSpecs, function(p) {
    var split = p.split(":");
    if (split.length !== 2) {
      console.error('Ignoring invalid plugin override spec %s', p);
      return;
    }
    parsedSpecs.push(split);
  });
  if (parsedSpecs.length === 0) {
    return {};
  }
  return _.object(parsedSpecs);
};


/**
 * main is the command line entry point when this file is run as a script.
 */
var main = function main() {
  var opts = parseArgs();
  if (opts.isGoogleApi && !opts.pkgPrefix) {
    opts.pkgPrefix = 'grpc-google-';
  }
  if (opts.buildCommonProtos) {
    opts.isGoogleApi = true;
    opts.pkgPrefix = 'googleapis-common-protos';
    opts.apiName = 'googleapis-common-protos';
    opts.apiVersion = '';
  }
  if (opts.overridePlugins) {
    opts.overridePlugins = parsePlugins(opts.overridePlugins);
  }
  if (opts.outDir) {
    opts.outDir = path.resolve(opts.outDir);
  }
  if (opts.repoDir) {
    opts.repoDir = path.resolve(opts.repoDir);
  }
  var repo = new ApiRepo(opts);
  var parts = opts.apiName.split('/');
  var apiName = parts[0];
  var apiVersion = parts[1] || '';
  repo.on('ready', function() {
    if (opts.buildCommonProtos) {
      repo.buildCommonProtoPkgs();
    } else {
      repo.buildPackages(apiName, apiVersion);
    }
  });
  repo.on('error', function(err) {
    console.error('Could not build packages:', err);
  });
  repo.setUp();
}

if (require.main === module) {
  main();
}
